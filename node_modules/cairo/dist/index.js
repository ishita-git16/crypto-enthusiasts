#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Path = _interopDefault(require('path'));
var yargs = _interopDefault(require('yargs'));
var fs = _interopDefault(require('fs'));
var prettier = _interopDefault(require('prettier'));
var chokidar = _interopDefault(require('chokidar'));
var chalk = _interopDefault(require('chalk'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var log = {
    error: function (msg) { return console.log(chalk.red(msg)); },
    info: function (msg) { return console.log(chalk.blue(msg)); },
    success: function (msg) { return console.log(chalk.green(msg)); },
    warning: function (msg) { return console.log(chalk.yellow(msg)); },
};

function getPropValue(value) {
    if (Number(value) || value === "true" || value === "false") {
        return "" + value;
    }
    return "\"" + value + "\"";
}
function renderPropType(_a) {
    var _b = _a, name = _b[0], _c = _b[1], _default = _c._default, _common = _c._common, values = __rest(_c, ["_default", "_common"]);
    return name + ": PropTypes.oneOf([" + Object.entries(values).map(function (_a) {
        var key = _a[0], value = _a[1];
        return getPropValue(key);
    }) + "])";
}
function renderDefaultProp(_a) {
    var _b = _a, name = _b[0], _c = _b[1], _default = _c._default, _common = _c._common, values = __rest(_c, ["_default", "_common"]);
    if (!_default)
        return;
    return name + ": \"" + _default + "\"";
}
function renderTypeProps(_a) {
    var _b = _a, name = _b[0], _c = _b[1], _default = _c._default, _common = _c._common, values = __rest(_c, ["_default", "_common"]);
    var renderProps = Object.entries(values)
        .map(function (_a) {
        var key = _a[0], value = _a[1];
        return getPropValue(key);
    })
        .join("|");
    return name + "?: " + renderProps;
}
function renderProvider() {
    return "\n  // THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\n  export { CairoProvider as Provider } from \"cairo-primitives\";\n";
}
function renderComponent(component, styleConfig) {
    if (styleConfig === void 0) { styleConfig = {}; }
    return "\n  // THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n  \n  import React from \"react\";\n  import PropTypes from \"prop-types\";\n  import {\n    " + component + " as " + component + "Primitive,\n    // " + component + "Props as " + component + "PrimitiveProps,\n  } from \"cairo-primitives\";\n  \n  export type " + component + "Props = {\n    " + Object.entries(styleConfig.variants).sort().map(renderTypeProps) + "\n  };\n\n  // export type " + component + "Props = " + component + "PrimitiveProps & {\n  //   " + Object.entries(styleConfig.variants).sort().map(renderTypeProps) + "\n  // };\n  \n  export const " + component + " = React.forwardRef<any, any>(\n    (props, forwardedRef) => (\n      <" + component + "Primitive\n        {...props}\n        ref={forwardedRef}\n        styleConfig={" + JSON.stringify(styleConfig) + "}\n      />\n    )\n  );\n  \n  " + component + ".defaultProps = {\n    " + Object.entries(styleConfig.variants).sort().map(renderDefaultProp) + "\n  };\n\n  " + component + ".propTypes = {\n    " + Object.entries(styleConfig.variants).sort().map(renderPropType) + "\n  };\n";
}
var primitiveComponents = {
    Badge: { base: {}, variants: {} },
    Box: { base: {}, variants: {} },
    Button: { base: {}, variants: {} },
    Checkbox: { base: {}, variants: {} },
    Code: { base: {}, variants: {} },
    CodeBlock: { base: {}, variants: {} },
    Container: { base: {}, variants: {} },
    Divider: { base: {}, variants: {} },
    Grid: { base: {}, variants: {} },
    Image: { base: {}, variants: {} },
    Input: { base: {}, variants: {} },
    Link: { base: {}, variants: {} },
    Select: { base: {}, variants: {} },
    Table: { base: {}, variants: {} },
    Text: { base: {}, variants: {} },
    Textarea: { base: {}, variants: {} },
};
function format(source) {
    return prettier.format(source, { parser: "babel-ts" });
}
function writeFile(path, fileName, data) {
    if (!fs.existsSync(path)) {
        fs.mkdirSync(path, { recursive: true });
    }
    fs.writeFileSync(Path.resolve(path, fileName), format(data));
}
function generate(configFile, outputPath) {
    return __awaiter(this, void 0, void 0, function () {
        var pkg, components;
        return __generator(this, function (_a) {
            pkg = require(Path.resolve(process.cwd(), "package.json"));
            if (!pkg.dependencies.hasOwnProperty("prop-types")) {
                log.error("Error: Install `prop-types` first.");
                log.info("Solution: Run `npm i prop-types` or `yarn add prop-types`.");
                return [2 /*return*/];
            }
            log.warning("Generating files...");
            components = __assign(__assign({}, primitiveComponents), configFile.components);
            Object.entries(components).forEach(function (_a) {
                var component = _a[0], styleConfig = _a[1];
                var componentSource = renderComponent(component, styleConfig);
                writeFile(outputPath, component + ".tsx", componentSource);
            });
            writeFile(outputPath, "Provider.ts", renderProvider());
            writeFile(outputPath, "index.ts", "export { Provider } from \"./Provider\";\n    " + Object.entries(components)
                .sort()
                .map(function (_a) {
                var component = _a[0], styleConfig = _a[1];
                return "export { " + component + " } from \"./" + component + "\";";
            })
                .join(";"));
            log.success("Done!");
            return [2 /*return*/];
        });
    });
}
var generate$1 = (function (ctx) {
    var watch = ctx.watch, inputPath = ctx.inputPath, outputPath = ctx.outputPath;
    function requireUncached(module) {
        delete require.cache[require.resolve(module)];
        return require(module);
    }
    if (watch) {
        console.log("\n" + log.info("Watching..."));
        chokidar
            .watch(inputPath, {
            ignored: outputPath,
        })
            .on("change", function (path, stats) {
            // Bug: requires are cached
            var configFile = requireUncached(inputPath);
            console.log("> Changes on " + path);
            generate(configFile, outputPath);
        });
    }
    generate(requireUncached(inputPath), outputPath);
});

var argv = yargs.options({
    i: { type: "string", alias: "inputPath", description: "Config file path" },
    o: { type: "string", alias: "outputPath", description: "Generated output" },
    w: { type: "boolean", alias: "watch", description: "Watch mode" },
}).argv;
var inputPath = argv.i, outputPath = argv.o, watch = argv.w;
inputPath = Path.resolve(process.cwd(), inputPath || "");
outputPath = Path.resolve(process.cwd(), outputPath || "", "generated");
switch (argv._[0]) {
    case "generate":
        generate$1({ watch: watch, inputPath: inputPath, outputPath: outputPath });
        break;
    case "lint":
        log.warning("This feature has not been implemented yet");
        break;
    default:
        log.error("Error: Unknown command");
        break;
}
